import scalaz._, schema._
import monocle._

object module extends SchemaModule[JsonSchema.type] { 

  val R = JsonSchema 

final case class Person(name: String, role: Option[Role])
sealed trait Role
final case class User(active: Boolean, boss: Person) extends Role
final case class Admin(rights: List[String])         extends Role



  def user[Repr](pers: Schema[Repr, Person]) = record(
    "active" -*>: prim(JsonSchema.JsonBool) :*: "boss" -*>: self[Person](pers),
    Iso[(Boolean, Person), User]((User.apply _).tupled)(u => (u.active, u.boss))
  )

  val admin = record(
    "rights" -*>: seq(prim(JsonSchema.JsonString)),
    Iso[List[String], Admin](Admin.apply)(_.rights)
  )

  def role[Repr](pers: Schema[Repr, Person]) = union(
    "user" -+>: user(pers) :+:
      "admin" -+>: admin,
    Iso[User \/ Admin, Role] {
      case -\/(u) => u
      case \/-(a) => a
    } {
      case u @ User(_, _) => -\/(u)
      case a @ Admin(_)   => \/-(a)
    }
  )

  def person(pers: Schema_[Person]) = record(
    "name" -*>: prim(JsonSchema.JsonString) :*:
      "role" -*>: optional(
      role[pers.Repr](pers)
    ),
    Iso[(String, Option[Role]), Person]((Person.apply _).tupled)(p => (p.name, p.role))
  )

  val p = person(null)
}
import module._
:t p
